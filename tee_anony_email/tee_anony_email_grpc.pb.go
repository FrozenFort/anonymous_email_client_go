// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: tee_anony_email.proto

package tee_anony_email

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AnonyEmailServer_Attest_FullMethodName         = "/anony_email.AnonyEmailServer/Attest"
	AnonyEmailServer_SendAnonyEmail_FullMethodName = "/anony_email.AnonyEmailServer/SendAnonyEmail"
)

// AnonyEmailServerClient is the client API for AnonyEmailServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnonyEmailServerClient interface {
	Attest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	SendAnonyEmail(ctx context.Context, in *AnonyEmail, opts ...grpc.CallOption) (*Response, error)
}

type anonyEmailServerClient struct {
	cc grpc.ClientConnInterface
}

func NewAnonyEmailServerClient(cc grpc.ClientConnInterface) AnonyEmailServerClient {
	return &anonyEmailServerClient{cc}
}

func (c *anonyEmailServerClient) Attest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, AnonyEmailServer_Attest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anonyEmailServerClient) SendAnonyEmail(ctx context.Context, in *AnonyEmail, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, AnonyEmailServer_SendAnonyEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnonyEmailServerServer is the server API for AnonyEmailServer service.
// All implementations must embed UnimplementedAnonyEmailServerServer
// for forward compatibility
type AnonyEmailServerServer interface {
	Attest(context.Context, *Request) (*Response, error)
	SendAnonyEmail(context.Context, *AnonyEmail) (*Response, error)
	mustEmbedUnimplementedAnonyEmailServerServer()
}

// UnimplementedAnonyEmailServerServer must be embedded to have forward compatible implementations.
type UnimplementedAnonyEmailServerServer struct {
}

func (UnimplementedAnonyEmailServerServer) Attest(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Attest not implemented")
}
func (UnimplementedAnonyEmailServerServer) SendAnonyEmail(context.Context, *AnonyEmail) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAnonyEmail not implemented")
}
func (UnimplementedAnonyEmailServerServer) mustEmbedUnimplementedAnonyEmailServerServer() {}

// UnsafeAnonyEmailServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnonyEmailServerServer will
// result in compilation errors.
type UnsafeAnonyEmailServerServer interface {
	mustEmbedUnimplementedAnonyEmailServerServer()
}

func RegisterAnonyEmailServerServer(s grpc.ServiceRegistrar, srv AnonyEmailServerServer) {
	s.RegisterService(&AnonyEmailServer_ServiceDesc, srv)
}

func _AnonyEmailServer_Attest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnonyEmailServerServer).Attest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnonyEmailServer_Attest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnonyEmailServerServer).Attest(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnonyEmailServer_SendAnonyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnonyEmail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnonyEmailServerServer).SendAnonyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnonyEmailServer_SendAnonyEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnonyEmailServerServer).SendAnonyEmail(ctx, req.(*AnonyEmail))
	}
	return interceptor(ctx, in, info, handler)
}

// AnonyEmailServer_ServiceDesc is the grpc.ServiceDesc for AnonyEmailServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnonyEmailServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "anony_email.AnonyEmailServer",
	HandlerType: (*AnonyEmailServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Attest",
			Handler:    _AnonyEmailServer_Attest_Handler,
		},
		{
			MethodName: "SendAnonyEmail",
			Handler:    _AnonyEmailServer_SendAnonyEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tee_anony_email.proto",
}
